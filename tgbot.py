import pandas as pd
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
import random
import database
from transformers import AutoTokenizer, AutoModel
import torch
from sklearn.metrics.pairwise import cosine_similarity

with open('api_key.txt', 'r') as f:
    API_TOKEN = f.readline()
bot = telebot.TeleBot(API_TOKEN)
tokenizer = AutoTokenizer.from_pretrained('uaritm/multilingual_en_uk_pl_ru')
model = AutoModel.from_pretrained('uaritm/multilingual_en_uk_pl_ru')


unions = [
        '–°–¢–û–ü',
        '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç',
        '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–µ –Ω–∞—É—á–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ',
        'MISIS Media',
        '–ö–ª—É–± –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥—Ä—É–∂–±—ã',
        'International Student Council of NUST MISIS',
        '–¢—É—Ä–∫–ª—É–± –ù–ò–¢–£ –ú–ò–°–ò–°',
        '–í–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–π –∫–ª—É–±',
        '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –æ–±—â–µ–∂–∏—Ç–∏–π',
        '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è ¬´–ê—Ä—Ç –õ–∞–±¬ª',
        'MISIS eSports',
        '–ê–∫–∞–¥–µ–º–∏—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤ –ù–ò–¢–£ –ú–ò–°–ò–°',
        '–ö–ª—É–± —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤',
        '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–æ–µ –±—é—Ä–æ –ò–¢–û',
        '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª—É–± ¬´Green MISIS¬ª',
        '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∫–ª—É–±–æ–≤ –ú–ò–°–ò–°',
        '–•–∞–∫–∞—Ç–æ–Ω-–∫–ª—É–± ITAM',
        '–î–∏–∑–∞–π–Ω-–∫–ª—É–± ITAM',
        '–ì–µ–π–º–¥–µ–≤-–∫–ª—É–± –ú–ò–°–ò–° ITAM',
        '–¶–µ–Ω—Ç—Ä –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è',
        '–ö–ª—É–± –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤',
        '–ò–Ω–∫—É–±–∞—Ç–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤',
        '–ü–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–∏–π –∫–ª—É–±'
    ]

@bot.message_handler(commands=['start'])
def start(msg):
    if msg.from_user.username:
        text = f"–ü—Ä–∏–≤–µ—Ç–∏–∫, {msg.from_user.first_name}) –Ø –ú–∏—Å–∏—Å –°–∏–Ω–¥–µ—Ä üëâüëà\n\n" + \
               "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å —Ç–µ–±—è —Å –ª—é–¥—å–º–∏ –∏–∑ –ù–ò–¢–£ –ú–ò–°–ò–°. –Ø –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ª—é–¥–µ–π —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç–µ–±–µ –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ."
        bot.send_message(msg.chat.id, text)
        database.delete_user(msg.chat.id)
        sent = bot.send_message(msg.chat.id, '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?üòì')
        profile_data = {'user_id': msg.chat.id, 'username': msg.from_user.username}
        bot.register_next_step_handler(sent, get_name, profile_data)
    else:
        text = "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –≤–∞–º –Ω—É–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username). \n" + \
                "–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –¥–∞—Ç—å –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–µ."
        bot.send_message(msg.from_user.id, text)


def get_name(msg, profile_data):
    profile_data['name'] = msg.text
    text = "–ë–æ–æ–æ–æ–∂–µ, –∫–∞–∫–æ–µ —á—É–¥–µ—Å–Ω–æ–µ –∏–º—èü•π –ê —Å –∫–∞–∫–æ–≥–æ —Ç—ã –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞?‚ò∫Ô∏è"

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = telebot.types.KeyboardButton("–ò–ö–ù")
    item2 = telebot.types.KeyboardButton("–ò–ë–û")
    item3 = telebot.types.KeyboardButton("–ò–ù–ú–∏–ù")
    item4 = telebot.types.KeyboardButton("–≠–∫–æ–¢–µ—Ö")
    item5 = telebot.types.KeyboardButton("–ú–ì–ò")
    item6 = telebot.types.KeyboardButton("–≠–£–ü–ü")

    markup.add(item1, item2, item3, item4, item5, item6)

    sent = bot.send_message(msg.chat.id, text, reply_markup=markup)
    bot.register_next_step_handler(sent, get_institut, profile_data)


def get_institut(msg, profile_data):
    if str(msg.text).upper() in ["–ò–ö–ù", "–ò–ë–û", "–ò–ù–ú–ò–ù", "–≠–ö–û–¢–ï–•", "–ú–ì–ò", "–≠–£–ü–ü"]:
        profile_data['institut'] = msg.text
        text = "–ê –Ω–∞ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—ã —É—á–∏—à—å—Å—è?"
        sent = bot.send_message(msg.chat.id, text, reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(sent, get_program, profile_data)
    else:
        text = "–û—É.. —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫.. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑"
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = telebot.types.KeyboardButton("–ò–ö–ù")
        item2 = telebot.types.KeyboardButton("–ò–ë–û")
        item3 = telebot.types.KeyboardButton("–ò–ù–ú–∏–ù")
        item4 = telebot.types.KeyboardButton("–≠–∫–æ–¢–µ—Ö")
        item5 = telebot.types.KeyboardButton("–ú–ì–ò")
        item6 = telebot.types.KeyboardButton("–≠–£–ü–ü")

        markup.add(item1, item2, item3, item4, item5, item6)

        sent = bot.send_message(msg.chat.id, text, reply_markup=markup)
        bot.register_next_step_handler(sent, get_institut, profile_data)


def get_program(msg, profile_data):
    profile_data['program'] = msg.text
    text = "–ü—Ä–∞–≤–¥–∞?ü•∫ –ö–∞–∫–æ–µ –∫–ª–∞—Å—Å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ‚Ä¶ –ú–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å, –Ω–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ? üëâüëà"
    sent = bot.send_message(msg.chat.id, text)
    bot.register_next_step_handler(sent, get_course, profile_data)


def get_course(msg, profile_data):
    profile_data['course'] = msg.text
    text = "–£—Ö —Ç—ã—ã, –∞ –º–æ–∂–µ—à—å –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –≤ –∫–∞–∫–∏—Ö —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è—Ö —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å?ü•∫ –ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—à—å –≤—Å–µ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –°–¢–û–ü"

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)

    for union in unions:
        markup.add(telebot.types.KeyboardButton(union))
    profile_unions = []
    sent = bot.send_message(msg.chat.id, text, reply_markup=markup)
    bot.register_next_step_handler(sent, get_unions, profile_data, profile_unions, markup)

subjects = [
            '–°–¢–û–ü',
            '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
            '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
            '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏',
            '–ò—Å—Ç–æ—Ä–∏—è',
            '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
            '–ë–∏–æ–ª–æ–≥–∏—è',
            '–•–∏–º–∏—è',
            '–§–∏–∑–∏–∫–∞',
            '–î–∏–∑–∞–π–Ω',
            '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'
        ]

def get_unions(msg, profile_data, profile_unions, markup):
    if str(msg.text).upper() == '–°–¢–û–ü':
        profile_data['unions'] = list(set(profile_unions))
        if len(profile_data['unions']) > 0:
            text = '–ö–∞–∫–æ–π –∂–µ —Ç—ã —É—É—É–º–Ω–∏—á–∫–∞ü•π –ê –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–∏–µ —à–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ? –≠—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —Ä–µ–±—è—Ç–∞ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç–µ–±–µ –∑–∞ –ø–æ–º–æ—â—å—é –ø–æ —ç—Ç–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ºü§ó –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–∏—à—å, –Ω–∞–∂–º–∏ –°–¢–û–üüòã'
        else:
            text = '–°–ø–∞—Å–∏–±–æ) –ê –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–∏–µ —à–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ? –≠—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —Ä–µ–±—è—Ç–∞ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç–µ–±–µ –∑–∞ –ø–æ–º–æ—â—å—é –ø–æ —ç—Ç–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ºü§ó –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–∏—à—å, –Ω–∞–∂–º–∏ –°–¢–û–üüòã'
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        subjects = [
            '–°–¢–û–ü',
            '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
            '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
            '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏',
            '–ò—Å—Ç–æ—Ä–∏—è',
            '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
            '–ë–∏–æ–ª–æ–≥–∏—è',
            '–•–∏–º–∏—è',
            '–§–∏–∑–∏–∫–∞',
            '–î–∏–∑–∞–π–Ω',
            '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'
        ]
        profile_subjects = []
        for subject in subjects:
            markup.add(telebot.types.KeyboardButton(subject))
        sent = bot.send_message(msg.chat.id, text, reply_markup=markup)
        bot.register_next_step_handler(sent, get_subjects, profile_data, profile_subjects, markup)

    else:
        profile_unions.append(msg.text)
        texts = ['–ó–∞–ø–∏—Å–∞–ª–∞', '–ú–æ–ª–æ–¥–µ—Ü', '–£–≤–∏–¥–µ–ª–∞']
        sent = bot.send_message(msg.chat.id, random.choice(texts), reply_markup=markup)
        bot.register_next_step_handler(sent, get_unions, profile_data, profile_unions, markup)


def get_subjects(msg, profile_data, profile_subjects, markup):
    if str(msg.text).upper() == '–°–¢–û–ü':
        profile_data['subjects'] = list(set(profile_subjects))
        text = '–ê –º–æ–∂–Ω–æ —è –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —É–∑–Ω–∞—é –æ —Ç–µ–±–µ?ü•∫ –ú–æ–∂–µ—à—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç–∏–∫ –ø—Ä–æ —Å–µ–±—è?üëâüëà –†–∞—Å—Å–∫–∞–∂–∏ —É —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö, —Ü–µ–ª—è—Ö, —Ö–æ–±–±–∏, —Ç–∞–∫ –º—ã —Å–º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –ø–æ—Ö–æ–∂–µ–≥–æ –¥—Ä—É–≥–∞üòå'
        sent = bot.send_message(msg.chat.id, text, reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(sent, get_text, profile_data)
    else:
        profile_subjects.append(msg.text)
        texts = ['–ó–∞–ø–∏—Å–∞–ª–∞', '–ú–æ–ª–æ–¥–µ—Ü', '–£–≤–∏–¥–µ–ª–∞']
        sent = bot.send_message(msg.chat.id, random.choice(texts), reply_markup=markup)
        bot.register_next_step_handler(sent, get_subjects, profile_data, profile_subjects, markup)


def get_text(msg, profile_data):
    profile_data['text'] = msg.text
    text = '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æüòä –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å - –Ω–∞–ø–∏—à–∏ /start'
    bot.send_message(msg.chat.id, text)
    text = f"**–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**ü•∞\n" + \
            f"**–ò–º—è:** {profile_data['name']}\n" + \
           f"**–ò–Ω—Å—Ç–∏—Ç—É—Ç:** {profile_data['institut']}\n" + \
           f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:** {profile_data['program']}\n" + \
           f"**–ö—É—Ä—Å:** {profile_data['course']}\n" + \
           f"**–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:** {', '.join(profile_data['unions'])}\n" + \
           f"**–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(profile_data['subjects'])}\n\n" + \
           f"{profile_data['text']}"
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    item2 = telebot.types.KeyboardButton("–í—Å–µ —Ö–æ—Ä–æ—à–æ")
    markup.add(item2)
    sent = bot.send_message(msg.chat.id, text, reply_markup=markup, parse_mode='Markdown')
    bot.register_next_step_handler(sent, is_done, profile_data)


class Emb_Creator:
    def __init__(self):
        self.tokenizer = AutoTokenizer.from_pretrained('uaritm/multilingual_en_uk_pl_ru')
        self.model = AutoModel.from_pretrained('uaritm/multilingual_en_uk_pl_ru')
        self.cos = torch.nn.CosineSimilarity(dim=1)
        self.all_embeddings = torch.tensor([])
        self.subjects = [
            '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
            '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
            '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏',
            '–ò—Å—Ç–æ—Ä–∏—è',
            '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
            '–ë–∏–æ–ª–æ–≥–∏—è',
            '–•–∏–º–∏—è',
            '–§–∏–∑–∏–∫–∞',
            '–î–∏–∑–∞–π–Ω',
            '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'
        ]

    # Mean Pooling - Take attention mask into account for correct averaging
    def _mean_pooling(self, model_output, attention_mask):
        token_embeddings = model_output[0]  # First element of model_output contains all token embeddings
        input_mask_expanded = attention_mask.unsqueeze(-1).expand(token_embeddings.size()).float()
        return torch.sum(token_embeddings * input_mask_expanded, 1) / torch.clamp(input_mask_expanded.sum(1), min=1e-9)

    def emb_creation(self, man_ancket):
        '''
        Create embedding for persons(if function get one ancket return vector else tensor with shape [num_ancket, 768])
        '''
        tokenized_text = self.tokenizer(text=man_ancket, return_tensors='pt', padding=True)
        with torch.no_grad():
            model_output = self.model(**tokenized_text)
        sentence_embeddings = self._mean_pooling(model_output, tokenized_text['attention_mask']).squeeze()
        if len(sentence_embeddings.shape) == 1:
            self.all_embeddings = torch.cat((self.all_embeddings, sentence_embeddings), 0)
        else:
            self.all_embeddings = torch.cat((self.all_embeddings, sentence_embeddings), 0)
        return sentence_embeddings

    def get_cos_sim(self, df, idx, k=1, return_max=True):
        '''
        func get index of person and return cos_sim of person with every man from BD
        '''
        man = df[df.user_id == idx]['embs']
        other_man = df[df.user_id != idx]
        encode_user_subjects = self.encode_subs(df[df.user_id == idx]['subjects'].values[0])
        encode_all_users_subjects = list(map(self.encode_subs, other_man['subjects'].values))
        cos_sim_subjects = torch.tensor(cosine_similarity([encode_user_subjects], encode_all_users_subjects))

        other_man = df[df.user_id != idx]
        other_embeddings = other_man['embs']
        # other_embeddings = torch.index_select(self.all_embeddings, 0, indices)
        tensor1 = list(map(lambda x: torch.tensor(x), man.values))
        tensor2 = list(map(lambda x: torch.tensor(x), other_embeddings.values))
        cosine_arr = (self.cos(tensor1[0], torch.stack(tensor2, dim=0)) + cos_sim_subjects)/2
        print(self.cos(tensor1[0], torch.stack(tensor2, dim=0)))
        print(cos_sim_subjects)
        print(cosine_arr)
        if return_max:
            # print(cosine_arr, 'cosine')
            max_sim_idx = torch.topk(cosine_arr, k).indices
            # print(max_sim_idx)
            # max_sim_person = other_man.user_id[other_man.iloc[max_sim_idx == other_man.user_id]
            return other_man.iloc[int(max_sim_idx[0][0])].user_id
        min_sim_idx = torch.topk(1 / (cosine_arr * 100),
                                 k).indices  # I need get min topk but I lazy and I solve invert numbers(I dont want to search min topk method)
        min_sim_person = other_man.iloc[int(min_sim_idx[0][0])].user_id
        return min_sim_person

    def encode_subs(self, lst_of_subs):
        encoded_subjects = [0 for i in range(11)]
        for i in lst_of_subs:
            if i in self.subjects:
                encoded_subjects[self.subjects.index(i)] = 1
            # indices = torch.tensor([el for el in df.indexes if el != idx])
        return encoded_subjects


model = Emb_Creator()


def is_done(msg, profile_data):
    if msg.text == '–í—Å–µ —Ö–æ—Ä–æ—à–æ':
        text = '–°—É–ø–µ—Ä) –†–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—Éüòä'
        sent = bot.send_message(msg.chat.id, text, reply_markup=ReplyKeyboardRemove())

        emb = model.emb_creation(profile_data['text'])
        emb = emb.detach().cpu().tolist()
        profile_data['embs'] = emb

        database.insert_varible_into_table(profile_data)
        print(database.get_developer_info(str(msg.chat.id)))
        menu(msg)
    elif msg.text == '–ó–∞–Ω–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å':
        bot.register_next_step_handler(msg, start)
    else:
        text = '–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫)'
        bot.send_message(msg.chat.id, text)
        bot.register_next_step_handler(msg, is_done, profile_data)


def menu_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    # markup.add(InlineKeyboardButton("–ù–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫", callback_data="mode_1"))
    # markup.add(InlineKeyboardButton("–ù–∞–∏–±–æ–ª–µ–µ –Ω–µ –ø–æ—Ö–æ–∂–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫", callback_data="mode_2"))
    # markup.add(InlineKeyboardButton("C–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="mode_3"))
    # markup.add(InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="mode_4"))
    markup.add(InlineKeyboardButton("–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚úã", callback_data="set_mode"))
    markup.add(InlineKeyboardButton("–ü–æ–º–æ—â—å‚òéÔ∏è", callback_data="help"),
               InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—Éüìù", callback_data="restart"))
    markup.add(InlineKeyboardButton("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ãüì•", callback_data="offers"))
    return markup


def set_mode(call):
    text = "–ö–∞–∫–æ–π —Ä–µ–∂–∏–º —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?ü•∫"
    markup = InlineKeyboardMarkup()
    markup.row_width = 1

    markup.add(InlineKeyboardButton("–ù–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫", callback_data="mode_1"))
    markup.add(InlineKeyboardButton("–ù–∞–∏–±–æ–ª–µ–µ –Ω–µ –ø–æ—Ö–æ–∂–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫", callback_data="mode_2"))
    markup.add(InlineKeyboardButton("C–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="mode_3"))
    markup.add(InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="mode_4"))
    bot.send_message(call.from_user.id, text, reply_markup=markup)


@bot.message_handler(commands=['menu'])
def menu(msg):
    text = f"{msg.from_user.first_name}, —Ç—ã —á—Ç–æ-—Ç–æ —Ö–æ—Ç–µ–ª?üëâüëà"
    bot.send_message(msg.from_user.id, text, reply_markup=menu_markup())


@bot.message_handler(commands=['nearest'])
def mode_1(call):
    data_user = database.get_developer_info(str(call.from_user.id))
    df_embs = database.create_df_embs(str(call.from_user.id))
    if not(df_embs[df_embs.user_id != str(call.from_user.id)].empty):
        rec_user = model.get_cos_sim(df_embs, str(call.from_user.id))
        data_other = database.get_developer_info(str(rec_user))
        text = f"–Ø –Ω–∞—à–ª–∞ —Ç–µ–±–µ –∫–æ–µ-–∫–æ–≥–æüòä: \n\n" + \
               f"**–ò–º—è:** {data_other['name']}\n" + \
               f"**–ò–Ω—Å—Ç–∏—Ç—É—Ç:** {data_other['institut']}\n" + \
               f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:** {data_other['program']}\n" + \
               f"**–ö—É—Ä—Å:** {data_other['course']}\n" + \
               f"**–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:** {', '.join(data_other['unions'])}\n" + \
               f"**–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(data_other['subjects'])}\n\n" + \
               f"{data_other['text']}"

        def choice_markup():
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton("–•–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data=f"accept_mode1|{str(rec_user)}"),
                       InlineKeyboardButton("–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ", callback_data=f"skip_mode1|{str(rec_user)}"))
            return markup

        bot.send_message(call.from_user.id, text, reply_markup=choice_markup(), parse_mode='Markdown')
    else:
        bot.send_message(call.from_user.id, '–ü—Ä–æ—Å—Ç–∏, –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∞.. –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–Ω–∫–µ—Ç—ã....')


@bot.message_handler(commands=['distant'])
def mode_2(call):
    data_user = database.get_developer_info(str(call.from_user.id))
    df_embs = database.create_df_embs(str(call.from_user.id))
    if not (df_embs[df_embs.user_id != str(call.from_user.id)].empty):
        rec_user = model.get_cos_sim(df_embs, str(call.from_user.id), return_max=False)
        data_other = database.get_developer_info(str(rec_user))
        text = f"–Ø –Ω–∞—à–ª–∞ —Ç–µ–±–µ –∫–æ–µ-–∫–æ–≥–æüòä: \n\n" + \
               f"**–ò–º—è:** {data_other['name']}\n" + \
               f"**–ò–Ω—Å—Ç–∏—Ç—É—Ç:** {data_other['institut']}\n" + \
               f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:** {data_other['program']}\n" + \
               f"**–ö—É—Ä—Å:** {data_other['course']}\n" + \
               f"**–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:** {', '.join(data_other['unions'])}\n" + \
               f"**–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(data_other['subjects'])}\n\n" + \
               f"{data_other['text']}"

        def choice_markup():
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton("–•–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data=f"accept_mode1|{str(rec_user)}"),
                       InlineKeyboardButton("–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ", callback_data=f"skip_mode1|{str(rec_user)}"))
            return markup

        bot.send_message(call.from_user.id, text, reply_markup=choice_markup(), parse_mode='Markdown')
    else:
        bot.send_message(call.from_user.id, '–ü—Ä–æ—Å—Ç–∏, –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∞.. –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–Ω–∫–µ—Ç—ã....')


@bot.message_handler(commands=['random'])
def mode_3(call):
    df = database.get_users_without_users_id(str(call.from_user.id))
    if not(df.empty):
        profile_data = df.iloc[0]
        text = f"–Ø –Ω–∞—à–ª–∞ —Ç–µ–±–µ –∫–æ–µ-–∫–æ–≥–æüòä: \n\n" + \
               f"**–ò–º—è:** {profile_data['name']}\n" + \
               f"**–ò–Ω—Å—Ç–∏—Ç—É—Ç:** {profile_data['institut']}\n" + \
               f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:** {profile_data['program']}\n" + \
               f"**–ö—É—Ä—Å:** {profile_data['num_course']}\n" + \
               f"**–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:** {', '.join(profile_data['unions'])}\n" + \
               f"**–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(profile_data['subjects'])}\n\n" + \
               f"{profile_data['anketa']}"
        def choice_markup():
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton("–•–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data=f"accept_mode1|{str(profile_data['user_id'])}"),
                       InlineKeyboardButton("–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ", callback_data=f"skip_mode1|{str(profile_data['user_id'])}"))
            return markup
        bot.send_message(call.from_user.id, text, reply_markup=choice_markup(), parse_mode='Markdown')
    else:
        bot.send_message(call.from_user.id, '–ü—Ä–æ—Å—Ç–∏, –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∞.. –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–Ω–∫–µ—Ç—ã....')


@bot.message_handler(commands=['cat_find'])
def mode_4(call):
    text = "–í—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–π—Ç–∏ —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–µ–±–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤ —Ç–æ–π" + \
           " –∏–ª–∏ –∏–Ω–æ–π —Å—Ñ–µ—Ä–µ"
    def markup():
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton("–ò–Ω—Å—Ç–∏—Ç—É—Ç", callback_data=f"mode_institut"),
                   InlineKeyboardButton("–ü—Ä–µ–¥–º–µ—Ç", callback_data=f"mode_subject"))
        markup.add(InlineKeyboardButton('–°—Ç—É–¥. –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ', callback_data=f"mode_union"))
        return markup
    bot.send_message(call.from_user.id, text, reply_markup=markup())


def mode_institut(call):
    text = "–í—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞:"
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)

    item1 = telebot.types.KeyboardButton("–ò–ö–ù")
    item2 = telebot.types.KeyboardButton("–ò–ë–û")
    item3 = telebot.types.KeyboardButton("–ò–ù–ú–∏–ù")
    item4 = telebot.types.KeyboardButton("–≠–∫–æ–¢–µ—Ö")
    item5 = telebot.types.KeyboardButton("–ú–ì–ò")
    item6 = telebot.types.KeyboardButton("–≠–£–ü–ü")

    markup.add(item1, item2, item3, item4, item5, item6)
    sent = bot.send_message(call.from_user.id, text, reply_markup=markup)
    bot.register_next_step_handler(sent, find_institut, 'msg')


def find_institut(msg, institut):
    if institut == 'msg': institut = msg.text
    df = database.get_user_institut(institut, str(msg.from_user.id))
    if not(df.empty):
        profile_data = df.iloc[0]
        text = f"–Ø –Ω–∞—à–ª–∞ —Ç–µ–±–µ –∫–æ–µ-–∫–æ–≥–æüòä: \n\n" + \
               f"**–ò–º—è:** {profile_data['name']}\n" + \
               f"**–ò–Ω—Å—Ç–∏—Ç—É—Ç:** {profile_data['institut']}\n" + \
               f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:** {profile_data['program']}\n" + \
               f"**–ö—É—Ä—Å:** {profile_data['num_course']}\n" + \
               f"**–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:** {', '.join(profile_data['unions'])}\n" + \
               f"**–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(profile_data['subjects'])}\n\n" + \
               f"{profile_data['anketa']}"
        def choice_markup():
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton("–•–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data=f"accept_mode_i|{str(profile_data['user_id'])}|{institut}"),
                       InlineKeyboardButton("–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ", callback_data=f"skip_mode_i|{str(profile_data['user_id'])}|{institut}"))
            return markup
        bot.send_message(msg.from_user.id, text, reply_markup=choice_markup(), parse_mode='Markdown')
    else:
        bot.send_message(msg.from_user.id, '–ü—Ä–æ—Å—Ç–∏, –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∞.. –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–Ω–∫–µ—Ç—ã....')


def mode_subject(call):
    text = "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –º—ã –ø–æ–¥–±–µ—Ä–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ:"

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for subject in subjects:
        if subject != '–°–¢–û–ü':
            markup.add(telebot.types.KeyboardButton(subject))
    sent = bot.send_message(call.from_user.id, text, reply_markup=markup)
    bot.register_next_step_handler(sent, find_subject, 'msg')


def find_subject(msg, subject):
    if subject == 'msg': subject = msg.text
    df = database.get_user_some('subjects', subject, str(msg.from_user.id))
    if not (df.empty):
        profile_data = df.iloc[0]
        text = f"–Ø –Ω–∞—à–ª–∞ —Ç–µ–±–µ –∫–æ–µ-–∫–æ–≥–æüòä: \n\n" + \
               f"**–ò–º—è:** {profile_data['name']}\n" + \
               f"**–ò–Ω—Å—Ç–∏—Ç—É—Ç:** {profile_data['institut']}\n" + \
               f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:** {profile_data['program']}\n" + \
               f"**–ö—É—Ä—Å:** {profile_data['num_course']}\n" + \
               f"**–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:** {', '.join(profile_data['unions'])}\n" + \
               f"**–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(profile_data['subjects'])}\n\n" + \
               f"{profile_data['anketa']}"

        def choice_markup():
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton("–•–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è",
                                            callback_data=f"accept_mode_s|{str(profile_data['user_id'])}|{subject}"),
                       InlineKeyboardButton("–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ",
                                            callback_data=f"skip_mode_s|{str(profile_data['user_id'])}|{subject}"))
            return markup

        bot.send_message(msg.from_user.id, text, reply_markup=choice_markup(), parse_mode='Markdown')
    else:
        bot.send_message(msg.from_user.id, '–ü—Ä–æ—Å—Ç–∏, –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∞.. –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–Ω–∫–µ—Ç—ã....')


def mode_union(call):
    text = "–í—ã–±–µ—Ä–∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞:"

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for subject in unions:
        if subject != '–°–¢–û–ü':
            markup.add(telebot.types.KeyboardButton(subject))
    sent = bot.send_message(call.from_user.id, text, reply_markup=markup)
    bot.register_next_step_handler(sent, find_unions, 'msg')


def find_unions(msg, union):
    if union == 'msg': union = msg.text
    df = database.get_user_some('unions', union, str(msg.from_user.id))
    if not (df.empty):
        profile_data = df.iloc[0]
        text = f"–Ø –Ω–∞—à–ª–∞ —Ç–µ–±–µ –∫–æ–µ-–∫–æ–≥–æüòä: \n\n" + \
               f"**–ò–º—è:** {profile_data['name']}\n" + \
               f"**–ò–Ω—Å—Ç–∏—Ç—É—Ç:** {profile_data['institut']}\n" + \
               f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:** {profile_data['program']}\n" + \
               f"**–ö—É—Ä—Å:** {profile_data['num_course']}\n" + \
               f"**–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:** {', '.join(profile_data['unions'])}\n" + \
               f"**–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(profile_data['subjects'])}\n\n" + \
               f"{profile_data['anketa']}"

        def choice_markup():
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton("–•–æ—á—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è",
                                            callback_data=f"accept_mode_u|{str(profile_data['user_id'])}|{union}"),
                       InlineKeyboardButton("–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ",
                                            callback_data=f"skip_mode_u|{str(profile_data['user_id'])}|{union}"))
            return markup

        bot.send_message(msg.from_user.id, text, reply_markup=choice_markup(), parse_mode='Markdown')
    else:
        bot.send_message(msg.from_user.id, '–ü—Ä–æ—Å—Ç–∏, –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∞.. –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–Ω–∫–µ—Ç—ã....')



@bot.message_handler(commands=['offers'])
def offers(msg):
    offers_id = database.get_offers(str(msg.from_user.id))
    bot.send_message(msg.from_user.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∫–µ—Ç: {len(offers_id)}")
    if len(offers_id) > 0:
        user_id = offers_id[0]
        profile_data = database.get_developer_info(user_id)
        text = f"–Ø –Ω–∞—à–ª–∞ —Ç–µ–±–µ –∫–æ–µ-–∫–æ–≥–æüòä: \n\n" + \
               f"**–ò–º—è:** {profile_data['name']}\n" + \
               f"**–ò–Ω—Å—Ç–∏—Ç—É—Ç:** {profile_data['institut']}\n" + \
               f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:** {profile_data['program']}\n" + \
               f"**–ö—É—Ä—Å:** {profile_data['course']}\n" + \
               f"**–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:** {', '.join(profile_data['unions'])}\n" + \
               f"**–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(profile_data['subjects'])}\n\n" + \
               f"{profile_data['text']}"

        def markup():
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"like|{str(user_id)}"),
                       InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"dislike|{str(user_id)}"))
            markup.add(InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f"offer_skip|{str(user_id)}"))
            return markup

        bot.send_message(msg.from_user.id, text, reply_markup=markup(), parse_mode='Markdown')


@bot.message_handler(commands=['help'])
def help_user(msg):
    text = "–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–æ–∏—Ç –¥–æ–ø–∏—Å–∞—Ç—å –¥–ª—è –ø–æ–º–æ—â–∏"
    bot.send_message(msg.from_user.id, text)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "mode_1":
        mode_1(call)

    if call.data == "mode_2":
        mode_2(call)

    if call.data == "mode_3":
        mode_3(call)

    if call.data == "mode_4":
        mode_4(call)

    if call.data == 'mode_institut':
        mode_institut(call)

    if call.data == 'mode_subject':
        mode_subject(call)

    if call.data == 'mode_union':
        mode_union(call)

    if call.data == "set_mode":
        set_mode(call)

    if call.data[:12] == 'accept_mode1':
        rec_user = call.data[13:]
        text = "–ú–Ω–µ —Ç–æ–∂–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –µ–≥–æ –∞–Ω–∫–µ—Ç–∞‚ò∫Ô∏è –Ø —Å–∫–∞–∂—É –µ–º—É, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å –Ω–∏–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è) "
        bot.send_message(call.from_user.id, text)
        database.insert_into_actions(str(call.from_user.id), rec_user, 'send_offer')
        text = '–ò–∑–≤–∏–Ω–∏ –µ—Å–ª–∏ –æ—Ç–≤–ª–µ–∫–∞—éüëâüëà –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—èü§ó' + \
                '\n–ù–∞–ø–∏—à–∏—Ç–µ /offers —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∞–Ω–∫–µ—Ç—É)'
        bot.send_message(int(rec_user), text)
        menu(call)

    if call.data[:10] == 'skip_mode1':
        rec_user = call.data[11:]
        database.insert_into_actions(str(call.from_user.id), rec_user, 'skip')
        mode_1(call)

    if call.data[:13] == 'accept_mode_i':
        rec_user = str(call.data).split('|')[1]
        text = "–ú–Ω–µ —Ç–æ–∂–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –µ–≥–æ –∞–Ω–∫–µ—Ç–∞‚ò∫Ô∏è –Ø —Å–∫–∞–∂—É –µ–º—É, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å –Ω–∏–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è)"
        bot.send_message(call.from_user.id, text)
        database.insert_into_actions(str(call.from_user.id), rec_user, 'send_offer')
        text = '–ò–∑–≤–∏–Ω–∏ –µ—Å–ª–∏ –æ—Ç–≤–ª–µ–∫–∞—éüëâüëà –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—èü§ó' + \
                '\n–ù–∞–ø–∏—à–∏—Ç–µ /offers —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∞–Ω–∫–µ—Ç—É)'
        bot.send_message(int(rec_user), text)
        menu(call)

    if call.data[:11] == 'skip_mode_i':
        rec_user, institut = str(call.data).split('|')[1], str(call.data).split('|')[2]
        database.insert_into_actions(str(call.from_user.id), rec_user, 'skip')
        find_institut(call, institut)

    if call.data[:13] == 'accept_mode_s':
        rec_user = str(call.data).split('|')[1]
        text = "–ú–Ω–µ —Ç–æ–∂–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –µ–≥–æ –∞–Ω–∫–µ—Ç–∞‚ò∫Ô∏è –Ø —Å–∫–∞–∂—É –µ–º—É, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å –Ω–∏–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è)"
        bot.send_message(call.from_user.id, text)
        database.insert_into_actions(str(call.from_user.id), rec_user, 'send_offer')
        text = '–ò–∑–≤–∏–Ω–∏ –µ—Å–ª–∏ –æ—Ç–≤–ª–µ–∫–∞—éüëâüëà –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—èü§ó' + \
                '\n–ù–∞–ø–∏—à–∏—Ç–µ /offers —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∞–Ω–∫–µ—Ç—É)'
        bot.send_message(int(rec_user), text)
        menu(call)

    if call.data[:11] == 'skip_mode_s':
        rec_user, subject = str(call.data).split('|')[1], str(call.data).split('|')[2]
        database.insert_into_actions(str(call.from_user.id), rec_user, 'skip')
        find_subject(call, subject)

    if call.data[:13] == 'accept_mode_u':
        rec_user = str(call.data).split('|')[1]
        text = "–ú–Ω–µ —Ç–æ–∂–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –µ–≥–æ –∞–Ω–∫–µ—Ç–∞‚ò∫Ô∏è –Ø —Å–∫–∞–∂—É –µ–º—É, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å –Ω–∏–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è)"
        bot.send_message(call.from_user.id, text)
        database.insert_into_actions(str(call.from_user.id), rec_user, 'send_offer')
        text = '–ò–∑–≤–∏–Ω–∏ –µ—Å–ª–∏ –æ—Ç–≤–ª–µ–∫–∞—éüëâüëà –ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—èü§ó' + \
                '\n–ù–∞–ø–∏—à–∏—Ç–µ /offers —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∞–Ω–∫–µ—Ç—É)'
        bot.send_message(int(rec_user), text)
        menu(call)

    if call.data[:11] == 'skip_mode_u':
        rec_user, union = str(call.data).split('|')[1], str(call.data).split('|')[2]
        database.insert_into_actions(str(call.from_user.id), rec_user, 'skip')
        find_unions(call, union)

    if call.data[:4] == 'like':
        rec_user = call.data[5:]
        profile_user2 = database.get_developer_info(rec_user)
        text = f"–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥-–¥—Ä—É–≥—É, –≤–æ—Ç –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã: @{profile_user2['username']}\n–Ø —Ç–∞–∫ —Å—á–∞—Å—Ç–ª–∏–≤–∞ü•π, —Ä–∞–¥–∞ –±—ã–ª–∞ –ø–æ–º–æ—á—å)"
        bot.send_message(call.from_user.id, text)
        profile_data = database.get_developer_info(str(call.from_user.id))
        text = f"–ü—Ä–æ—Å—Ç–∏, –µ—Å–ª–∏ —Ç—ã –∑–∞–Ω—è—Çüëâüëà @{call.from_user.username} —Ç–æ–∂–µ —Ö–æ—á–µ—Ç —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è) –Ø —Ç–∞–∫ —Å—á–∞—Å—Ç–ª–∏–≤–∞ü•π, —Ä–∞–¥–∞ –±—ã–ª–∞ –ø–æ–º–æ—á—å) –ù–∞–ø–æ–º–Ω—é –µ–≥–æ –∞–Ω–∫–µ—Ç—É:\n"
        bot.send_message(int(rec_user), text)
        text =  f"**–ò–º—è:** {profile_data['name']}\n" + \
               f"**–ò–Ω—Å—Ç–∏—Ç—É—Ç:** {profile_data['institut']}\n" + \
               f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:** {profile_data['program']}\n" + \
               f"**–ö—É—Ä—Å:** {profile_data['course']}\n" + \
               f"**–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:** {', '.join(profile_data['unions'])}\n" + \
               f"**–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(profile_data['subjects'])}\n\n" + \
               f"{profile_data['text']}"
        database.update_users(rec_user, str(call.from_user.id), 'like')
        bot.send_message(int(rec_user), text, parse_mode='Markdown')
        offers(call)

    if call.data[:7] == 'dislike':
        rec_user = call.data[8:]
        database.update_users(rec_user, str(call.from_user.id), 'dislike')
        offers(call)

    if call.data[:10] == 'offer_skip':
        rec_user = call.data[11:]
        database.delete_user_action(rec_user, str(call.from_user.id))
        database.insert_into_actions(rec_user, str(call.from_user.id), 'send_offer')
        offers(call)

    if call.data == 'offers':
        offers(call)

    if call.data == 'help':
        help_user(call)


#–£–ë–†–ê–¢–¨ –í –ö–û–ù–¶–ï!!
@bot.message_handler(commands=['reload'])
def reload(call):
    database.delete_table('actions')
    database.create_table_actions()


bot.infinity_polling()
